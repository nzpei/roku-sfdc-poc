import "Types.bs"

namespace TimeUtils

    ' Helper function convert seconds to [hh:]mm:ss format
    ' GetFormattedTime(138) returns 2:18
    function GetFormattedTime(length as dynamic) as string
        if length = invalid or length < 0
            return "0:00"
        end if

        hours = length \ 3600
        minutes = (length \ 60) mod 60
        seconds = length mod 60

        if seconds < 10
            seconds = "0" + seconds.ToStr()
        else
            seconds = seconds.ToStr()
        end if

        if minutes < 10 and hours > 0
            minutes = "0" + minutes.ToStr()
        else
            minutes = minutes.ToStr()
        end if

        formattedTime = minutes + ":" + seconds

        if hours > 0
            formattedTime = hours.ToStr() + ":" + formattedTime
        end if

        return formattedTime
    end function

    function GetFormattedTimeLeft(unixTimestamp as dynamic) as string
        if unixTimestamp = invalid
            return "N/A"
        end if

        currentTime = TimeUtils.Now().AsSeconds()
        timeLeft = unixTimestamp - currentTime
        if timeLeft <= 0
            return "now"
        end if

        if timeLeft < 60
            result = `${timeLeft} second`
            if timeLeft > 1
                result += "s"
            end if
            return result
        end if

        timeLeft = timeLeft / 60.0
        if timeLeft < 60
            timeLeft = Cint(timeLeft)
            result = `${timeLeft} minute`
            if timeLeft > 1
                result += "s"
            end if
            return result
        end if

        timeLeft = timeLeft / 60.0
        if timeLeft < 24
            timeLeft = Cint(timeLeft)
            result = `${timeLeft} hour`
            if timeLeft > 1
                result += "s"
            end if
            return result
        else
            timeLeft = timeLeft / 24.0
            timeLeft = Cint(timeLeft)
            result = `${timeLeft} day`
            if timeLeft > 1
                result += "s"
            end if
            return result
        end if
    end function

    function Now() as object
        this = m.now
        if this = invalid
            this = CreateObject("roDateTime")
            m.now = this
        end if
        this.mark()
        return this
    end function

    function RFC1123_Date(when as object) as string
        wd = when.getWeekday().left(3)
        dom = when.getDayOfMonth()
        mon = Ucase(TimeUtils.MonthStr(when.getMonth()).left(3))
        yr = when.getYear()
        hr = when.getHours()
        mn = when.getMinutes()
        sc = when.getSeconds()
        date = `${wd}, ${dom} ${mon} ${yr} ${hr}:${mn}:${sc} GMT"`
        return date
    end function

    function MonthStr(mNum as integer) as string
        ma = m.Num2Month
        if ma = invalid
            ma = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]
            m.Num2Month = ma
        end if
        return ValidString(ma[mNum - 1])
    end function

end namespace
