import "pkg:/source/utils/FocusManagement.bs"
import "pkg:/source/AsyncTask/AsyncTask.bs"
import "pkg:/source/AsyncTask/Tasks.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/Services/Salesforce/SalesforceService.bs"

function Init()
    m.selectedDashboardTitleLabel = m.top.findNode("selectedDashboardTitleLabel")
    m.selectedDashboardCreatedByLabel = m.top.findNode("selectedDashboardCreatedByLabel")
    m.selectedDashboardLastModifiedDateLabel = m.top.findNode("selectedDashboardLastModifiedDateLabel")
    m.selectedDashboardDescriptionLabel = m.top.findNode("selectedDashboardDescriptionLabel")

    m.list = m.top.findNode("list")
    m.includeCheckList = m.top.findNode("includeCheckList")

    m.contentTask = AsyncTask.Start(Tasks.GetDashboardListTask, {
        content: m.top
        includeOptions: m.includeCheckList.checkedState
    }, OnDashboardContentSet)

end function

function OnNodeReady()
    m.list.ObserveField("itemFocused", FuncName(OnItemFocused))
    m.list.ObserveField("itemSelected", FuncName(OnItemSelected))
    m.includeCheckList.ObserveField("checkedState", FuncName(OnCheckListStateChange))
    NodeSetFocus(m.list, true)

end function

function OnContentSet(result as object) as void
    content = m.top.content
    if content = invalid
        return
    end if
end function

function OnDashboardContentSet(result as object) as void
    if result.success = false
        DialogUtils.ShowDialog(result.error.message, "Error Retreiving Dashboard List", true)
    else
        m.list.content = result.result
    end if
end function

function OnFocusChange() as void

end function

function OnItemFocused()

    if m.list.content <> invalid
        currDb = m.list.content.getChild(m.list.itemFocused)

        m.selectedDashboardTitleLabel.text = currDb.title
        m.selectedDashboardCreatedByLabel.text = currDb.author
        m.selectedDashboardLastModifiedDateLabel.text = currDb.lastModifiedDate
        m.selectedDashboardDescriptionLabel.text = currDb.description

    end if

end function

function OnItemSelected() as void
    index = m.list.itemSelected
    if index >= 0
        currDb = m.list.content.getChild(index)

        RegistryUtils.Write(RegistryUtils.SFDC_DASHBOARD_ID, currDb.sfid)

        m.appController@.PopScreen()
        sfDbScreen = CreateObject("roSGNode", "SalesforceDashboardScreen")
        m.appController@.PushScreen(sfDbScreen)
        sfDbScreen@.BindNode()
    end if
end function

function OnCheckListStateChange()
    m.contentTask = AsyncTask.Start(Tasks.GetDashboardListTask, {
        content: m.top
        includeOptions: m.includeCheckList.checkedState
    }, OnDashboardContentSet)

end function

function OnKeyEvent(key as string, press as boolean) as boolean

    if press = false
        return false
    end if

    if key = "left"
        NodeSetFocus(m.includeCheckList, true)
        return true
    end if

    if key = "right"
        NodeSetFocus(m.list, true)
        return true
    end if

    if key = "back"
        dialog = DialogUtils.ShowDialogButtons("Are you sure you want to log out?", "Log Out", ["Log Out"])
        dialog.observeField("buttonSelected", FuncName(OnExitDialog), ["buttonSelected"])
        return true
    end if
    return false
end function

function OnExitDialog(event as object)
    buttonIndex = event.GetData()
    if buttonIndex = 0 ' Log Out
        AsyncTask.Start(Tasks.LogOutTask, invalid, OnLogOutComplete)
    end if
end function

function OnLogOutComplete(output as object)
    m.appController@.PopScreen()
    sfAuthScreen = CreateObject("roSGNode", "SalesforceAuthScreen")
    m.appController@.PushScreen(sfAuthScreen)
    sfAuthScreen@.BindNode()
end function


